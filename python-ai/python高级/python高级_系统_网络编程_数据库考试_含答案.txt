Python 高级_系统编程_网络编程 考试题
ABACC  DACCC
FTTFT  TFFTF

====选择题=====(每题一分)
1. 下列关于私有化说法错误的是：（A）
A. 父类中属性名为__name的，子类可以访问，但不能继承
B. 如果在子类中向__name赋值，那么会在子类中定义的一个与父类相同名字的属性
C. _name的变量、函数、类，在使用from xxx import *时都不会被导入
D. python并没有实现真正的私有化

2. 下列说法中错误的是：（B）
A. 凡是可以直接作用于for循环的对象统称为可迭代对象
B. 使用深拷贝产生的对象与被拷贝对象的id相同
C. Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class实例能添加的属性
D. Python允许使用tab进行缩进

3. 下列关于闭包的说法错误的是：（A）
A. 闭包是面向对象编程的语法结构
B. 必须有一个内嵌函数
C. 内嵌函数必须引用外部函数中的变量
D. 外部函数的返回值必须是内嵌函数

# 解析: 闭包是函数式编程的一个重要的语法结构，
# 函数式编程是一种编程范式 (而面向过程编程和面向对象编程也都是编程范式)。
# 在面向过程编程中，我们见到过函数(function)；在面向对象编程中，我们见过对象(object)。
# 函数和对象的根本目的是以某种逻辑方式组织代码，并提高代码的可重复使用性(reusability)。
# 闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。 

4.请判断下列哪一个不是可迭代对象(C)
A."hello python"
B.[2,0,1,7,6,6,6]
C.123456
D.{"h":"el", "lo":"py"}

5.下列关于动态语言特征的说法错误的是(C)
A.动态语言可以在运行过程中给对象添加属性或方法
B.动态语言可以在运行过程中删除对象的属性和方法
C.动态语言因为其运行速度比不上c、c++等静态语言，所以是低级语言
D.python定义类时，可以使用__slots__限制将来可以为该类实例添加的属性

6. 现有一张staff表如下:
ID   Name
1    张三
2    李四
3    王五
4    赵四
要求只取出前两条记录, 下列sql语句不正确的是?(D)
A. select * from staff limit 0,2;
B. select * from staff limit 2;
C. select * from staff where id<=2;
D. select * from staff limit 1,2;

7. 下列关于线程说法错误的是：（A）
A. 多线程的效率高于单线程
B. 线程自己不独立拥有系统资源
C. 一个线程可以创建和撤消另一个线程
D. 线程是程序中一个单一的顺序控制流程

8. 下列说法正确的是：（C）
A. linux系统中端口有数万个之多，可以随意使用
B. 端口是在网络中标识一台电脑唯一的标志                                                 ?
C. TCP/IP协议是最基本的两个协议
D. socket是区别于TCP/IP的另外一种网络协议

9. 下面关于UDP说法错误的是：（C）
A. 一个UDP网络程序，可以绑定信息（ip地址，端口号），也可以不绑定
B. UDP的服务器和客户端的区分：往往是通过请求服务和提供服务来进行区分
C. 一个UDP网络程序，如果不绑定端口，操作系统分配一个固定不变的
D. 一般情况下，服务器端，需要绑定端口

10. 下面关于TCP说法错误的是：（C）
A. 在TCP通信开始之前，一定要先建立相关的链接，才能发送数据
B. 在TCP通信结束之前，需要一定的操作才能释放链接
C. TCP服务器使用listen使套接字变为可以主动链接
D. TCP是基于字节流的网络协议


====判断题====(每题一分)

1. 使用闭包时内部函数可以直接对外部函数作用域里的变量进行修改。（False）

2. url的基本组成部分有资源路径,域名和协议。（True）

3. 匹配出长度为6-20位，由字母、数字、下划线组成且字母开头的字符串，正则表达是写法为 r"^[a-zA-Z][0-9a-zA-Z_]{5,19}$"。（True）

4. 多进程中，每个进程中所有数据（包括全局变量）都各有拥有一份，互不影响，所以进程间无法通信。（False）

5. 当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。（True）

6. Socket连接属于请求-响应形式，服务端可主动将消息推送给客户端。（True）

7. TCP和UDP都属于网络层协议。（False）

8. TCP长连接适用于并发量大的情况。（False）

9. 每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的。（True）

10. 多进程服务器适合客户端特别多的情况。（False）                                                   ?


====填空题=====(每题一分)

1. 邮政编码规则为：6位数字且不能以0开头，正则表达式为(r"^[1-9][0-9]{5}$")。

2. 可以在网络中精确定位一台主机位置的是(ip地址)。

3. 设置端口复用(setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True))

4. 现有一张user表如下:
ID   Name
1    张三
2    李四
3    王五
4    赵六
5	  周七
6	  钱八
要求取出第2到第4条记录,对应的sql语句为(select * from user limit 1,3;)。

5. 线程同步能够保证多个线程安全访问竞争资源，最简单的同步机制是引入（互斥锁）。

6. 动态端口的范围是从（1024~65535）。

7. 要通过Internet进行通信，至少需要一对套接字，其中一个运行在（客户端），另一个运行于（服务器端）。

8. 网络由上往下分为（应用层）、（传输层）、(网络层)、(链路层)。

9. UDP协议和TCP协议的套接字类型分别为（SOCK_DGRAM）、（SOCK_STREAM）。

10.TCP通信每个连接的建立都是需要资源消耗和时间消耗的，连接的建立通过（三次握手），连接的释放需要（四次握手）。

====简答题=====(每题5分, 共六问)

1. 简述Python中深拷贝和浅拷贝的异同。
答：深/浅拷贝都用于对象的拷贝操作，复制并构造一个新的组合对象
    copy.copy 浅拷贝 只拷贝父对象，不会拷贝对象的内部的子对象。 
    copy.deepcopy 深拷贝 拷贝对象及其子对象

2. 现有学生表t_student如下：
+-----+-----------+--------+-------+--------------+--------------------+
| id  | name      | gender | birth | department   | address            |
+-----+-----------+--------+-------+--------------+--------------------+
| 901 | 张三      | 男     |  1985 | 计算机系     | 北京市海淀区       |
| 902 | 李四      | 男     |  1986 | 中文系       | 云南省大理市       |
| 903 | 王五      | 女     |  1990 | 中文系       | 安徽省合肥市       |
| 904 | 赵六      | 男     |  1990 | 英语系       | 辽宁省沈阳市       |
| 905 | 小张      | 女     |  1991 | 英语系       | 福建省厦门市       |
| 906 | 小刚      | 男     |  1988 | 计算机系     | 安徽省黄山市       |
+-----+-----------+--------+-------+--------------+--------------------+
成绩表t_score如下:
+----+--------+-----------+-------+
| id | stu_id | cls_name  | score |
+----+--------+-----------+-------+
|  1 |    901 | 计算机    |    98 |
|  2 |    901 | 英语      |    80 |
|  3 |    902 | 计算机    |    65 |
|  4 |    902 | 中文      |    88 |
|  5 |    903 | 中文      |    95 |
|  6 |    904 | 计算机    |    70 |
|  7 |    904 | 英语      |    92 |
|  8 |    905 | 英语      |    94 |
|  9 |    906 | 计算机    |    90 |
| 10 |    906 | 英语      |    85 |
+----+--------+-----------+-------+
根据上述表信息，书写出对应的查询SQL语句
第1问：查询t_student表中名字中带“张”字的学生信息
第2问：查询计算机成绩低于95的学生信息

select * from t_student where name like "%张%";
select * from t_student where id in(select stu_id from t_score where cla_name='计算机' and score < 95)


答案解析：
第1问：查询t_student表中名字中带“张”字的学生信息
SELECT * FROM t_student WHERE name like "%张%";
第2问：查询计算机成绩低于95的学生信息
SELECT * FROM t_student WHERE id IN (SELECT stu_id FROM t_score WHERE cls_name="计算机" and score<95);
评分标准：（共10分）
第1问：能够满足效果得4分，否则得0分
第2问：能够满足效果得6分，否则得0分

3. 简述程序、进程、线程、协程之间的关系。
答：程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念；
    进程是程序在处理机上的一次执行过程，它是一个动态的概念；
    程序可以作为一种软件资料长期存在；而进程是有一定生命期的，是暂时的；
    线程是最小的执行单元，而进程由至少一个线程组成；
    多进程中，每个进程中所有数据（包括全局变量）都各有拥有一份，互不影响；
    多线程中，所有线程共享进程的内存。
    协程，只使用一个线程，分解一个线程成为多个“微线程”，在一个线程中规定某个代码块的执行顺序。
    线程和进程的操作是由程序触发系统接口，最后的执行者是系统，它本质上是操作系统提供的功能。
    而协程的操作则是程序员指定的，在python中通过yield，人为的实现并发处理。

4. 简述TCP和UDP的区别及优缺点。
答：UDP是面向无连接的通讯协议，UDP数据包括目的端口号和源端口号信息。
    优点：UDP速度快、操作简单、需要求系统资源较少，由于通讯不需要连接，可以实现广播发送。
    缺点：UDP传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收，也不用重发，不可靠。
    TCP是面向连接的通信协议，通过三次握手建立连接，通讯完成时要拆除连接。
    优点：TCP在数据传递时，有确认、窗口、重传、拥塞控制机制，能保证数据正确性，较为可靠。
    缺点：TCP速度慢、要求系统资源较多

5. 简述TCP的三次握手和四次挥手。
答：第一次握手：客户端向服务器发送连接请求包，标志位SYN（同步序号）置为1，序号为X=0；
    第二次握手：服务器收到客户端发过来报文，由SYN=1知道客户端要求建立联机。向客户端发送一个SYN和ACK都置为1的TCP报文，
设置初始序号Y=0，将确认序号(Acknowledgement Number)设置为客户的序列号加1，即X+1 = 0+1=1；
    第三次握手：客户端收到服务器发来的包后检查确认序号(Acknowledgement Number)是否正确，即第一次发送的序号加1（X+1=1）。
以及标志位ACK是否为1。若正确，服务器再次发送确认包，ACK标志位为1，SYN标志位为0。确认序号(Acknowledgement Number)=Y+1=0+1=1，发送序号为X+1=1。
客户端收到后确认序号值与ACK=1则连接建立成功，可以传送数据了。
    
    第一次挥手：客户端给服务器发送TCP包，用来关闭客户端到服务器的数据传送。将标志位FIN和ACK置为1，序号为X=1，确认序号为Z=1。
    第二次挥手：服务器收到FIN后，发回一个ACK(标志位ACK=1),确认序号为收到的序号加1，即X=X+1=2。序号为收到的确认序号=Z。
    第三次挥手：服务器关闭与客户端的连接，发送一个FIN。标志位FIN和ACK置为1，序号为Y=1，确认序号为X=2。
    第四次挥手：客户端收到服务器发送的FIN之后，发回ACK确认(标志位ACK=1),确认序号为收到的序号加1，即Y+1=2。序号为收到的确认序号X=2。
    
====编程题=====(1, 2各十分, 3题20分)

1. 使用装饰器装饰一个函数，计算一个函数(自定义一个函数)从开始到结束的运行时间。
参考代码：
import time

def timing(func):
    def inner(*args, **kwargs):
        start = time.time()
        func(*args, **kwargs)
        end = time.time() - start
        print(end)
    return inner

@timing
def myfunc(*args, **kwargs):
    for i in range(10000000):
        pass

myfunc()

2. 编写TCP服务器把客户端发送的信息返回给客户端。
参考代码：
import socket

def tcp_server():
    addr = ("",8000)
    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    tcp_socket.bind(addr)
    tcp_socket.listen(20)
    while True:
        newSocket, clientAddr = tcp_socket.accept()
        while True:
            data = newSocket.recv(1024)
            if not data:
                break
            print('receive from %s: %s' %(clientAddr, data))
            newSocket.send(data)
        newSocket.close()

if __name__ == '__main__':
    tcp_server()

3. 自定义with语句：
要求1：可以使用with Mysql('heima', 'root', 'mysql') as cursor:
语句获取游标对象cursor,操作cursor即可完成数据库操作；
要求2：Mysql类中三个参数分别对应要连接的数据库名、用户名、密码；
要求3：如果数据库操作正常，上下文中自动提交（自动执行commit()方法）,关闭游标并且关闭数据库连接；
要求4：如果数据库操作出现异常，上下文中自动回滚（自动执行rollback()方法），关闭游标并且关闭数据库连接，捕获异常并打印报错信息。

参考代码:
from pymysql import connect

class Mysql(object):
    # 初始化方法
    def __init__(self, db_name, user_name, passwd):
        # 定义变量保存数据库名、用户名、密码
        self.db_name = db_name
        self.user_name = user_name
        self.passwd = passwd

    # 上文方法
    def __enter__(self):
        # 返回mysql连接对象
        self.connect = connect(host='localhost', port=3306, user=self.user_name, password=self.passwd, database=self.db_name,
                            charset='utf8')
        # 获得cursor对象
        self.cursor = self.connect.cursor()
        # 返回cursor对象
        return self.cursor

    # 下文方法
    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_val:
            # 如果出现异常, 回滚并打印异常信息
            self.connect.rollback()
            print(exc_val)
        else:
            # 如果没有异常, 提交
            self.connect.commit()
        # 关闭corsor和connect对象
        self.cursor.close()
        self.connect.close()
        # 如果出现异常, 但希望抑制该异常(不希望异常以报错的方式抛出), 返回True
        return True

if __name__ == '__main__':
    # 使用with管理Mysql连接
    with Mysql('heima', 'root', 'mysql') as mysql:
        pass

